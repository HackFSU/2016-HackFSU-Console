/**
* User model
*
* Autogenerated by modelify.js.
* TODO: Add your own documentation for this file here.
* TODO write a script to give current users roleIds
*/

'use strict';

import Parse from 'parse/node';
import _ from 'lodash';
import validate from 'lib/validate';
import { acl } from 'app/routes/util';

const PARSE_CLASSNAME = 'User';

export default class User extends Parse.User {
	constructor(o) {
		super(PARSE_CLASSNAME);
	}

	static new(o) {
		let user = new User();

		validate(o, _.isPlainObject);
		user.set('firstName', validate(o.firstName, _.isString));
		user.set('lastName', validate(o.lastName, _.isString));
		user.set('email', validate(o.email, _.isString));
		user.set('username', o.email);
		user.set('password', validate(o.password, _.isString));
		user.set('shirtSize', validate(o.shirtSize, _.isString));
		user.set('roleKey', acl.role('User').id);

		// optional
		user.set('diet', validate(o.diet, _.isString, true));
		user.set('github', validate(o.github, _.isString, true));
		user.set('phone', validate(o.phone, _.isString, true));

		return user;
	}

	/**
	* Returns a single User based on ID
	*/
	static find(id) {
		let promiseFind = new Parse.Promise();

		let query = new Parse.Query(User);
		query.get(id).then(function(user) {
			promiseFind.resolve(user);
		}, function(err) {
			promiseFind.reject(err);
		});

		return promiseFind;
	}

	/**
	* Returns the User's name, formatted as 'FIRST LAST'
	*/
	getName() {
		return `${this.get('firstName')} ${this.get('lastName')}`;
	}

	static checkEmailUsed(email) {
		return new Promise(function(resolve, reject) {
			let query = new Parse.Query(User);
			query.limit(1);
			query.equalTo('email', validate(email, _.isString));
			query.find()
			.then(function(results) {
				resolve(results.length > 0);
			}, function(err) {
				reject(err);
			});
		});
	}


	static checkLogin(email, password) {
		return new Promise(function(resolve, reject) {
			User.logIn(email, password)
			.then(function(user) {
				if(!user) {
					reject('Invalid Credentials');
					return;
				}

				resolve(user.id);
			}, function(err) {
				reject(err);
			});
		});
	}

	/**
	 * Simple query automation, abstracts out parse obj
	 */
	static fetchSimple(objectId, ...cols) {
		return new Promise(function(resolve, reject) {
			let query = new Parse.Query(User);
			query.select(cols);
			query.get(objectId)
			.then(function(user) {
				let result = {};

				result.objectId = objectId;
				cols.forEach(function(c) {
					result[c] = user.get(c);
				});
				resolve(result);

			}, function(err) {
				reject(err);
			});
		});
	}



}


Parse.Object.registerSubclass(PARSE_CLASSNAME, User);
