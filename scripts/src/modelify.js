/**
* modelify.js
*
* Generates beautiful ES6-based Parse models for use in our app. It even does
* validations! You still have to add some custom things though... but it's a
* nice start.
*
* Hand crafted with <3 by Trevor.
*/

'use strict';

import _ from 'lodash';
import fs from 'fs';

let klass = process.argv[2];
let attrs = _.drop(process.argv, 3);

// Start off our model with some nice code.
// NOTE: Don't use this for User model right now! User model (and other built-in
// Parse classes) are set up slightly differently and aren't supported yet.
let model =
`/**
* ${klass} model
*
* Autogenerated by modelify.js.
* TODO: Add your own documentation for this file here.
*/

'use strict';

export default function (app) {
	const PARSE_CLASSNAME = '${klass}';

	const Parse = app.Parse;
	const _ = app._;
	const validate = app.validate;

	class ${klass} extends Parse.Object {
		constructor(o) {
			super(PARSE_CLASSNAME);

			o = validate(o, _.isObject);
`;

// Parse each attribute. Type (i.e. what we will validate the attribute with) comes after a colon,
// like so: name:type(!). Optional ! at the end of type forces the attribute to be non-empty and
// non-null before it can be validated.
// TODO: For non-typed attributes (aka user might add custom validation methods), allow ! to be
// appended directly to the name. Example, 'modelify Update title! subtitle!'
_.each(attrs, function(attr) {
	attr = attr.split(':');
	let name = attr[0];
	let type = attr[1];
	let force = false; 		// Default

	if (_.endsWith(name, '!')) {
		force = true;
		name = _.trimRight(name, '!');
	}
	else if (_.endsWith(type, '!')) {
		force = true;
		type = _.trimRight(type, '!');
	}

	// Generate a validation for each attribute.
	// Options are:
	//     (1) No type (custom validation method) AND forced (non-falsey).
	//     (2) No type AND not forced
	//     (3) Typed (lodash function) AND forced
	//     (4) Typed AND not forced
	// NOTE: The formatting will make your eyes bleed, but it helps with spacing in the
	// generated file!
	if (_.isEmpty(type)) {
		// Option 1
		if (force) {
			model +=
`			this.${name} = validate(o.${name}, ${name} => {
				return !!${name};
			});
`;
		}
		// Option 2
		else {
			model +=
`			this.${name} = validate(o.${name}, ${name} => {
				return;
			});
`;
	}
	}
	else {
		// Option 3
		if (force) {
			model +=
`			this.${name} = validate(o.${name}, ${name} => {
				return !!${name} && _.is${type}(${name});
			});
`;
		}
		// Option 4
		else {
			model +=
`			this.${name} = validate(o.${name}, _.is${type});
`;
		}
	}
});

// Finish up our model
model +=
`		}
	}

	app.model.${klass} = ${klass};
	Parse.Object.registerSubclass(PARSE_CLASSNAME, ${klass});
}
`;

// Write our beautiful new model file!
fs.writeFile(`app/models/${klass}.js`, model, function (err) {
  if (err) {
	  throw err;
  }

  console.log(`Model ${klass} created as app/models/${klass}.js\n`);
});
