{"version":3,"sources":["modelify.js"],"names":[],"mappings":";;;;;;;;AAQA,YAAY,CAAC;;;;;;;;;;;;AAKb,IAAI,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC5B,IAAI,KAAK,GAAG,iBAAE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;;AAEpC,IAAI,KAAK,uEAEmB,KAAK,2GAMxB,KAAK,yHAKb;;;;;;;AAAC,AAOF,iBAAE,IAAI,CAAC,KAAK,EAAE,UAAS,IAAI,EAAE;AAC5B,KAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACvB,KAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB,KAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACnB,KAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;;;;;AAAC,AAKlC,MAAK,oBAAkB,IAAI,sBAAiB,IAAI,cAAS,IAAI,SAAM;AAAC,CACpE,CAAC,CAAC;;AAEH,KAAK,qCAIQ,KAAK,WAAM,KAAK,4DACqB,KAAK,YAEtD,CAAC;;AAEF,aAAG,SAAS,iBAAe,KAAK,UAAO,KAAK,EAAE,UAAU,GAAG,EAAE;AAC3D,KAAI,GAAG,EAAE;AACR,QAAM,GAAG,CAAC;EACV;AACD,QAAO,CAAC,GAAG,YAAU,KAAK,+BAA0B,KAAK,WAAQ,CAAC;CACnE,CAAC,CAAC","file":"modelify.js","sourcesContent":["/**\n* Generates beautiful ES6-based Parse models for use in our app. It even does\n* validations! You still have to add some custom things though... but it's a\n* nice start.\n*\n* Hand crafted with love by Trevor.\n*/\n\n'use strict';\n\nimport _ from 'lodash';\nimport fs from 'fs';\n\nlet klass = process.argv[2];\nlet attrs = _.drop(process.argv, 3);\n\nlet model = `\nexport default function (app) {\n\tconst PARSE_CLASSNAME = '${klass}';\n\n\tconst Parse = app.Parse;\n\tconst _ = app._;\n\tconst validate = app.validate;\n\n\tclass ${klass} extends Parse.Object {\n\t\tconstructor(o) {\n\t\t\tsuper(PARSE_CLASSNAME);\n\n\t\t\to = validate(o, _.isObject);\n`;\n\n// Parse each attribute. Type (i.e. what we will validate the attribute with) comes after a colon,\n// like so: name:type(!). Optional ! at th end of type forces the attribute to be non-empty and\n// non-null before it can be validated.\n// TODO: For non-typed attributes (aka user might add custom validation methods), allow ! to be\n// appended directly to the name. Example, 'modelify Update title! subtitle!'\n_.each(attrs, function(attr) {\n\tattr = attr.split(':');\n\tlet name = attr[0];\n\tlet type = attr[1];\n\tlet force = type[type.length - 1];\n\n\t// For now, this only supports lodash methods and calls _.is{Type} function.\n\t// TODO: Support custom entries.\n\t// TODO: Support force.\n\tmodel += `\\t\\t\\tthis.${name} = validate(o.${name}, _.is${type});\\n`;\t\t// TODO: Uppercase first letter to support lowercase types in the cmd line?\n});\n\nmodel += `\n\t\t}\n\t}\n\n\tapp.model.${klass} = ${klass};\n\tParse.Object.registerSubclass(PARSE_CLASSNAME, ${klass});\n}\n`;\n\nfs.writeFile(`app/models/${klass}.js`, model, function (err) {\n  if (err) {\n\t  throw err;\n  }\n  console.log(`Model ${klass} created as app/models/${klass}.js\\n`);\n});\n"],"sourceRoot":"/src"}